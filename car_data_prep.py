{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Year      Hand  capacity_Engine  Gear_אוטומטית  Gear_טיפטרוניק  \\\n",
      "26 -0.009584  0.932772        -0.285341       0.268462       -0.130744   \n",
      "42  1.130884 -0.687664         0.480693       0.268462       -0.130744   \n",
      "54 -0.294701  0.122554        -0.476849       0.268462       -0.130744   \n",
      "67 -0.009584  0.122554         1.438235       0.268462       -0.130744   \n",
      "72 -0.009584  0.122554        -0.285341       0.268462       -0.130744   \n",
      "\n",
      "    Gear_ידנית  Gear_רובוטית  Engine_type_בנזין  Engine_type_גז  \\\n",
      "26   -0.209427     -0.092057           0.394132       -0.130744   \n",
      "42   -0.209427     -0.092057          -2.537223       -0.130744   \n",
      "54   -0.209427     -0.092057           0.394132       -0.130744   \n",
      "67   -0.209427     -0.092057          -2.537223       -0.130744   \n",
      "72   -0.209427     -0.092057           0.394132       -0.130744   \n",
      "\n",
      "    Engine_type_דיזל  ...  City_קרית אונו  City_קרית ארבע  City_קרית אתא  \\\n",
      "26         -0.230429  ...       -0.092057       -0.092057      -0.268462   \n",
      "42          4.339739  ...       -0.092057       -0.092057      -0.268462   \n",
      "54         -0.230429  ...       -0.092057       -0.092057      -0.268462   \n",
      "67         -0.230429  ...       -0.092057       -0.092057      -0.268462   \n",
      "72         -0.230429  ...       -0.092057       -0.092057      -0.268462   \n",
      "\n",
      "    City_קרית ים  City_רחובות  City_רמלה  City_שוהם  City_שער אפרים  \\\n",
      "26     -0.092057    -0.286039  -0.092057  -0.092057       -0.092057   \n",
      "42     -0.092057    -0.286039  -0.092057  -0.092057       -0.092057   \n",
      "54     -0.092057    -0.286039  -0.092057  -0.092057       -0.092057   \n",
      "67     -0.092057    -0.286039  -0.092057  -0.092057       -0.092057   \n",
      "72     -0.092057    -0.286039  -0.092057  -0.092057       -0.092057   \n",
      "\n",
      "    City_שפרעם  City_תל אביב יפו  \n",
      "26   -0.092057         -0.160817  \n",
      "42   -0.092057         -0.160817  \n",
      "54   -0.092057         -0.160817  \n",
      "67   -0.092057         -0.160817  \n",
      "72   -0.092057         -0.160817  \n",
      "\n",
      "[5 rows x 116 columns]\n",
      "26    46000\n",
      "42    50000\n",
      "54    40000\n",
      "67    82000\n",
      "72    33000\n",
      "Name: Price, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "def clean_column(column):\n",
    "    return column.str.replace(',', '').replace('None', '0').replace('', '0').astype(float)\n",
    "\n",
    "def prepare_data(df):\n",
    "    # הסרת נתונים חסרים בעמודת מחיר\n",
    "    df = df.dropna(subset=['Price'])\n",
    "    \n",
    "    # הסרת תווים לא רצויים והמרת עמודות למספרים\n",
    "    df['Km'] = clean_column(df['Km'])\n",
    "    df['capacity_Engine'] = clean_column(df['capacity_Engine'])\n",
    "    \n",
    "    # מילוי ערכים חסרים בעמודות אחרות\n",
    "    imputer = SimpleImputer(strategy='mean')\n",
    "    df[['Km', 'Hand', 'capacity_Engine', 'Pic_num', 'Supply_score']] = imputer.fit_transform(df[['Km', 'Hand', 'capacity_Engine', 'Pic_num', 'Supply_score']])\n",
    "    \n",
    "    # הסרת ערכים אינסופיים אם ישנם\n",
    "    df.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
    "    df.dropna(inplace=True)\n",
    "    \n",
    "    # המרת נתונים קטגוריאליים ל-one-hot encoding\n",
    "    df = pd.get_dummies(df, columns=['Gear', 'Engine_type', 'Prev_ownership', 'Curr_ownership', 'Area', 'Color', 'City'])\n",
    "    \n",
    "    # בחירת תכונות רלוונטיות\n",
    "    features = ['Year', 'Hand', 'capacity_Engine'] + \\\n",
    "               [col for col in df.columns if col.startswith(('Gear_', 'Engine_type_', 'Prev_ownership_', 'Curr_ownership_', 'Area_', 'Color_', 'City_'))]\n",
    "    \n",
    "    # Scale הנתונים\n",
    "    scaler = StandardScaler()\n",
    "    df[features] = scaler.fit_transform(df[features])\n",
    "    \n",
    "    X = df[features]\n",
    "    y = df['Price']\n",
    "    \n",
    "    return X, y\n",
    "\n",
    "# קריאת הנתונים מקובץ ה-CSV\n",
    "df = pd.read_csv('dataset.csv')\n",
    "\n",
    "# הכנת הנתונים\n",
    "X, y = prepare_data(df)\n",
    "\n",
    "# בדיקה שהנתונים הוכנו כהלכה\n",
    "print(X.head())\n",
    "print(y.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
